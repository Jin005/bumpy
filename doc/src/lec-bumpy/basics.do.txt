
!split
===== This is a very quick intro to Python programming =====

 * variables for numbers, lists, and arrays
 * while loops and for loops
 * functions
 * if tests
 * plotting
 * files
% if COURSE == 'any':
 * classes
% endif

Method: show program code through math examples


!split
======= Variables, loops, lists, and arrays =======
label{basics:basic:objects}

FIGURE: [fig-bumpy/implementation5, width=500 frac=0.7]


===== Do you have access to Python? =====
label{basics:accesspy}

% if COURSE == 'TKT4140':
See "TKT4140 Course specific installation guidelines": "https://www.ntnu.no/wiki/display/kt/Python"

Other methods:

 * Mac and Windows: "Anaconda": "https://store.continuum.io/cshop/anaconda/"
 * Web browser ("Wakari": "https://wakari.io/" or "SageMathCloud": "https://cloud.sagemath.com/")

% else:
Many methods:

 * Mac and Windows: "Anaconda": "https://store.continuum.io/cshop/anaconda/"
 * Ubuntu: `sudo apt-get install`
 * Web browser ("Wakari": "https://wakari.io/" or "SageMathCloud": "https://cloud.sagemath.com/")

See "How to access Python for doing scientific computing": "http://hplgit.github.io/edu/accesspy/accesspy.html" for more details!
% endif

!split
===== Mathematical example =====

Most examples will involve this formula:

!bt
\begin{equation}
label{basics:seq}
s = v_0t + \frac{1}{2}at^2
\end{equation}
!et
We may view $s$ as a function of $t$: $s(t)$, and also include the
parameters in the notation: $s(t;v_0,a)$.

!split
===== A program for evaluating a formula =====
label{basics:formula:eval}

idx{text editor}
idx{program file}

!bblock Task
Compute $s$ for $t=0.5$, $v_0=2$, and $a=0.2$.
!eblock

!bblock Python code
@@@CODE src-bumpy/distance.py
!eblock

!bblock Execution
!bc sys
Terminal> python distance.py
1.025
!ec
!eblock

!split
===== Assignment statements assign a name to an object =====

idx{assignment statement}
idx{print statement}
idx{variable}

idx{objects}
idx{`float`}
idx{`int`}


!bc pycod
t = 0.5                   # real number makes float object
v0 = 2                    # integer makes int object
a = 0.2                   # float object
s = v0*t + 0.5*a*t**2     # float object
!ec

Rule:

 * evaluate right-hand side; it results in an *object*
 * left-hand side is a name for that object


!split
===== Formatted output with text and numbers =====
label{basics:printf}

 * Task: write out text with a number (3 decimals): `s=1.025`
 * Method: printf syntax

!bc pycod
print 's=%g' % s       # g: compact notation
print 's=%.2f' % s     # f: decimal notation, .2f: 2 decimals
!ec

idx{format string syntax}

Modern alternative: format string syntax

!bc pycod
print 's={s:.2f}'.format(s=s)
!ec

!split
===== Programming with a while loop =====
label{basics:while}

idx{while loop}

 * Task: write out a table of $t$ and $s(t)$ values (two columns),
   for $t\in [0,2]$ in steps of 0.1
 * Method: while loop

@@@CODE src-bumpy/while.py

!split
===== Output of the previous program =====

!bc sys
Terminal> python while.py
0 0.0
0.1 0.201
0.2 0.404
0.3 0.609
0.4 0.816
0.5 1.025
0.6 1.236
0.7 1.449
0.8 1.664
0.9 1.881
1.0 2.1
1.1 2.321
1.2 2.544
1.3 2.769
1.4 2.996
1.5 3.225
1.6 3.456
1.7 3.689
1.8 3.924
1.9 4.161
!ec

!split
===== Structure of a while loop =====
idx{boolean expression}
idx{`True`}
idx{`False`}

!bc pycod
while condition:
    <intented statement>
    <intented statement>
    <intented statement>
!ec

Note:

 * the colon in the first line
 * all statements in the loop *must be indented* <linebreak>
   (no braces as in C, C++, Java, ...)
 * `condition` is a boolean expression (e.g., `t <= 2`)

!split
===== Let's take a closer look at the output of our program =====

!bc sys
Terminal> python while.py
0 0.0
0.1 0.201
0.2 0.404
...
1.8 3.924
1.9 4.161
!ec

The last line contains 1.9, but the while loop should run also when
$t=2$ since the test is `t <= 2`. Why is this test `False`?

!split
===== Let's examine the program in the Python Online Tutor =====
idx{Python Online Tutor}

"Python Online Tutor": "http://pythontutor.com/visualize.html#mode=edit":
step through the program and examine variables
% if FORMAT == 'html':
(view in Chrome)
% endif

!bc pyoptpro
a = 0
da = 0.4
while a <= 1.2:
    print a
    a = a + da
!ec

!split
===== Ooops, why is `a <= 1.2` when `a` is `1.2`? Round-off errors! =====

!bc pyoptpro
a = 0
da = 0.4
while a <= 1.2:
    print a
    a = a + da
    # Inspect all decimals in da and a
    print 'da=%.16E\na=%.16E' % (da, a)
    print 'a <= 1.2: %g' %  (a <= 1.2)
!ec

!bbox
Small round-off error in `da` makes `a = 1.2000000000000002`
!ebox

!split
===== Rule: never `a == b` for real `a` and `b`! Always use a tolerance! =====

!bc pycod
a = 1.2
b = 0.4 + 0.4 + 0.4
boolean_condition1 = a == b              # may be False

# This is the way to do it
tol = 1E-14
boolean_condition2 = abs(a - b) < tol    # True
!ec


!split
===== A list collects several objects in a given sequence =====
label{basics:list}

idx{list}

A list of numbers:

!bc pycod
L = [-1, 1, 8.0]
!ec

A list can contain any type of objects, e.g.,

!bc pycod
L = ['mydata.txt', 3.14, 10]   # string, float, int
!ec

Some basic list operations:

!bc pyshell
>>> L = ['mydata.txt', 3.14, 10]
>>> print L[0]    # print first element (index 0)
mydata.txt
>>> print L[1]    # print second element (index 1)
3.14
>>> del L[0]      # delete the first element
>>> print L
[3.14, 10]
>>> print len(L)  # length of L
2
>>> L.append(-1)  # add -1 at the end of the list
>>> print L
[3.14, 10, -1]
!ec

!split
===== Store our table in two lists, one for each column =====

@@@CODE src-bumpy/while_list.py

!split
===== For loops =====
label{basics:for}

idx{for loop}

A for loop is used for visiting elements in a list, one by one:

!bc pyshell
>>> L = [1, 4, 8, 9]
>>> for e in L:
...     print e
...
1
4
8
9
!ec

Demo in the Python Online Tutor:

!bc pyoptpro
list1 = [0, 0.1, 0.2]
list2 = []
for element in list1:
    p = element + 2
    list2.append(p)
print list2
!ec

!split
===== Traditional for loop: integer counter over list/array indices =====

!bc pycod
somelist = ['file1.dat', 22, -1.5]

for i in range(len(somelist)):
    # access list element through index
    print somelist[i]
!ec

Note:

 * `range` returns a list of integers
 * `range(a, b, s)` returns the integers
   `a, a+s, a+2*s, ...` up to *but not including* (!!) `b`
 * `range(b)` implies `a=0` and `s=1`
 * `range(len(somelist))` returns `[0, 1, 2]`


!split
===== Let's replace our while loop by a for loop =====

@@@CODE src-bumpy/for_list.py

!split
===== Traversal of multiple lists at the same time with `zip` =====

idx{`zip`}
idx{multiple lists traversal with `zip`}

!bc pycod
for e1, e2, e3, ... in zip(list1, list2, list3, ...):
!ec

Alternative: loop over a common index for the lists

!bc pycod
for i in range(len(list1)):
    e1 = list1[i]
    e2 = list2[i]
    e3 = list3[i]
    ...
!ec


!split
===== Arrays are computationally efficient lists of numbers =====
label{basics:numpy}

idx{array}
idx{`numpy`}

 * Lists collect a set of objects in a single variable
 * Lists are very flexible (can grow, can contain ``anything'')
 * Array: computationally efficient and convenient list
 * Arrays must have fixed length and can only contain numbers of
   the same type (integers, real numbers, complex numbers)
 * Arrays require the `numpy` module

!split
===== Examples on using arrays =====

!bc pyshell
>>> import numpy
>>> L = [1, 4, 10.0]    # List of numbers
>>> a = numpy.array(L)  # Convert to array
>>> print a
[  1.   4.  10.]
>>> print a[1]          # Access element through indexing
4.0
>>> print a[0:2]        # Extract slice (index 2 not included!)
[  1.   4.]
>>> print a.dtype       # Data type of an element
float64
>>> b = 2*a + 1         # Can do arithmetics on arrays
>>> print b
[  3.   9.  21.]
!ec

!split
===== `numpy` functions creates entire arrays at once =====

Apply $\ln$ to all elements in array `a`:

!bc pyshell
>>> c = numpy.log(a)
>>> print c
[ 0.          1.38629436  2.30258509]
!ec

idx{`linspace`}

Create $n+1$ uniformly distributed coordinates in $[a,b]$:

!bc pycod
t = numpy.linspace(a, b, n+1)
!ec

Create array of length $n$ filled with zeros:

!bc pycod
t = numpy.zeros(n)
s = numpy.zeros_like(t)  # zeros with t's size and data type
!ec

!split
===== Let's use arrays in our previous program =====

@@@CODE src-bumpy/for_array.py

Note: no explicit loop for computing `s_values`!

!split
===== Standard mathematical functions are found in the `math` module =====
label{basics:math}

idx{mathematical functions}
idx{`math`}

!bc pyshell
>>> import math
>>> print math.sin(math.pi)
1.2246467991473532e-16         # Note: only approximate value
!ec

Get rid of the `math` prefix:

!bc pycod
from math import sin, pi
print sin(pi)

# Or import everything from math
from math import *
print sin(pi), log(e), tanh(0.5)
!ec

!split
===== Use the `numpy` module for standard mathematical functions applied to arrays =====

idx{import of modules}

Matlab users can do

!bc pycod
from numpy import *
x = linspace(0, 1, 101)
y = exp(-x)*sin(pi*x)
!ec

The Python community likes

!bc pycod
import numpy as np
x = np.linspace(0, 1, 101)
y = np.exp(-x)*np.sin(np.pi*x)
!ec

Our convention: use `np` prefix, but not in formulas involving
math functions

!bc pycod
import numpy as np
x = np.linspace(0, 1, 101)

from numpy import sin, exp, pi
y = exp(-x)*sin(pi*x)
!ec


!split
===== Array assignment gives view (no copy!) of array data =====

Consider *array assignment* `b=a`:

!bc pycod
a = np.linspace(1, 5, 5)
b = a
!ec
Here, `b` is a just *view* or a pointer to the data of `a` - no copying of
data!

See the following example how changes in `b` inflict changes in `a`
!bc pycod
>>> a
array([ 1.,  2.,  3.,  4.,  5.])
>>> b[0] = 5                          # changes a[0] to 5
>>> a
array([ 5.,  2.,  3.,  4.,  5.])
>>> a[1] = 9                          # changes b[1] to 9
>>> b
array([ 5.,  9.,  3.,  4.,  5.])
!ec

!split
===== Copying array data requires special action via the `copy` method =====

!bc pycod
>>> c = a.copy()       # copy all elements to new array c
>>> c[0] = 6           # a is not changed
>>> a
array([ 1.,  2.,  3.,  4.,  5.])
>>> c
array([ 6.,  2.,  3.,  4.,  5.])
>>> b
array([ 5.,  2.,  3.,  4.,  5.])
!ec

Note: `b` has still the values from the previous example


!split
===== Construction of tridiagonal and sparse matrices =====

 * SciPy offers a sparse matrix package "scipy.sparse": "http://docs.scipy.org/doc/scipy/reference/sparse.html"
 * The `spdiags` function may be used to  construct a sparse matrix from diagonals
 * Note that all the diagonals must have the same length as the dimension of their sparse matrix - consequently some elements of the diagonals are not used
 * The first $k$ elements are not used of the $k$ super-diagonal
 * The last  $k$ elements are not used of the $-k$ sub-diagonal

!split
===== Example on constructing a tridiagonal matrix using spdiags =====

!bc pyshell
>>> import numpy as np
>>> N = 6
>>> diagonals = np.zeros((3, N))   # 3 diagonals
diagonals[0,:] = np.linspace(-1, -N, N)
diagonals[1,:] = -2
diagonals[2,:] = np.linspace(1, N, N)
>>> import scipy.sparse
>>> A = scipy.sparse.spdiags(diagonals, [-1,0,1], N, N, format='csc')
>>> A.toarray()    # look at corresponding dense matrix
[[-2.  2.  0.  0.  0.  0.]
 [-1. -2.  3.  0.  0.  0.]
 [ 0. -2. -2.  4.  0.  0.]
 [ 0.  0. -3. -2.  5.  0.]
 [ 0.  0.  0. -4. -2.  6.]
 [ 0.  0.  0.  0. -5. -2.]]
!ec

!split
===== Example on constructing a tridiagonal matrix using diags =====
An alternative function that may be used to construct sparse matrices is the `diags` function. It differs from `spdiags` 
in the way it handles of diagonals.

 * All diagonals need to be given with their correct lengths (i.e. super- and sub-diagonals are shorter than the main diagonal)
 * It also supports scalar broadcasting
 
Here is how to construct the same matrix as in the previous example:
!bc pyshell
>>> diagonals = [-np.linspace(1, N, N)[0:-1], -2*np.ones(N), np.linspace(1, N, N)[1:]]   # 3 diagonals
>>> A = scipy.sparse.diags(diagonals, [-1,0,1], format='csc')
>>> A.toarray()    # look at corresponding dense matrix
[[-2.  2.  0.  0.  0.  0.]
 [-1. -2.  3.  0.  0.  0.]
 [ 0. -2. -2.  4.  0.  0.]
 [ 0.  0. -3. -2.  5.  0.]
 [ 0.  0.  0. -4. -2.  6.]
 [ 0.  0.  0.  0. -5. -2.]]
!ec

Here's an example using scalar broadcasting (need to specify shape):

!bc pyshell
>>> B = scipy.sparse.diags([1, 2, 3], [-2, 0, 1], shape=(6, 6), format='csc')
>>> B.toarray()    # look at corresponding dense matrix
[[ 2.  3.  0.  0.  0.  0.]
 [ 0.  2.  3.  0.  0.  0.]
 [ 1.  0.  2.  3.  0.  0.]
 [ 0.  1.  0.  2.  3.  0.]
 [ 0.  0.  1.  0.  2.  3.]
 [ 0.  0.  0.  1.  0.  2.]]
!ec

!split
===== Example on solving a tridiagonal system =====

We can solve $Ax=b$ with tridiagonal matrix $A$: choose some $x$,
compute $b=Ax$ (sparse/tridiagonal matrix product!), solve $Ax=b$,
and check that $x$ is the desired solution:

!bc pyshell
>>> x = np.linspace(-1, 1, N)  # choose solution
>>> b = A.dot(x)               # sparse matrix vector product
>>> import scipy.sparse.linalg
>>> x = scipy.sparse.linalg.spsolve(A, b)
>>> print x
[-1.  -0.6 -0.2  0.2  0.6  1. ]
!ec

Check against dense matrix computations:

!bc pyshell
>>> A_d = A.toarray()            # corresponding dense matrix
>>> b = np.dot(A_d, x)           # standard matrix vector product
>>> x = np.linalg.solve(A_d, b)  # standard Ax=b algorithm
>>> print x
[-1.  -0.6 -0.2  0.2  0.6  1. ]
!ec

!split
===== Plotting =====
label{basics:plot}

idx{plotting}
idx{graphics}
idx{visualization}
idx{`matplotlib`}

Plotting is done with `matplotlib`:

@@@CODE src-bumpy/plot1.py

% if FORMAT != 'ipynb':
The plotfile `myplot.png` looks like

FIGURE: [fig-bumpy/plot1_s, width=500 frac=0.5]
% endif

!split
===== Plotting of multiple curves =====

@@@CODE src-bumpy/plot2.py

% if FORMAT != 'ipynb':
FIGURE: [fig-bumpy/plot2_s, width=500 frac=0.5]
% endif


!split
======= Functions and branching =======
label{basics:func:branching}

FIGURE: [fig-bumpy/branching3, width=500 frac=0.7]

!split
===== Functions =====
label{basics:func}

 * $s(t)=v_0t + \frac{1}{2}at^2$ is a mathematical function
 * Can implement $s(t)$ as a Python function `s(t)`

!bc pypro
def s(t):
    return v0*t + 0.5*a*t**2

v0 = 0.2
a = 4
value = s(3)   # Call the function
!ec

idx{global variables}

Note:

 * functions start with the keyword `def`
 * statements belonging to the function must be indented
 * function input is represented by arguments
   (separated by comma if more than one)
 * function output is returned to the calling code
 * `v0` and `a` are *global variables*, which
   must be initialized before `s(t)` is called

!split
===== Functions can have multiple arguments =====

`v0` and `a` as function arguments instead of global variables:

!bc pypro
def s(t, v0, a):
    return v0*t + 0.5*a*t**2

value = s(3, 0.2, 4)   # Call the function

# More readable call
value = s(t=3, v0=0.2, a=4)
!ec

!split
===== Keyword arguments are arguments with default values =====

idx{keyword arguments}

!bc pypro
def s(t, v0=1, a=1):
    return v0*t + 0.5*a*t**2

value = s(3, 0.2, 4)         # specify new v0 and a
value = s(3)                 # rely on v0=1 and a=1
value = s(3, a=2)            # rely on v0=1
value = s(3, v0=2)           # rely on a=1
value = s(t=3, v0=2, a=2)    # specify everything
value = s(a=2, t=3, v0=2)    # any sequence allowed
!ec

 * Arguments without the argument name are called *positional arguments*
 * Positional arguments must always be listed before the *keyword arguments*
   in the function and in any call
 * The sequence of the keyword arguments can be arbitrary

!split
===== Vectorization speeds up the code =====

idx{vectorization}
idx{vectorized functions}

Scalar code (work with one number at a time):

!bc pycod
def s(t, v0, a):
    return v0*t + 0.5*a*t**2

for i in range(len(t)):
    s_values[i] = s(t_values[i], v0, a)
!ec

Vectorized code: apply `s` to the entire array

!bc pycod
s_values = s(t_values, v0, a)
!ec

How can this work?

 * Expression: v0*t + 0.5*a*t**2 with array `t`
 * `r1 = v0*t`  (scalar times array)
 * `r2 = t**2`  (square each element)
 * `r3 = 0.5*a*r2` (scalar times array)
 * `r1 + r3` (add each element)

!split
===== Python functions written for scalars normally work for arrays too! =====

True if computations involve arithmetic operations and math functions:

!bc pycod
from math import exp, sin

def f(x):
    return 2*x + x**2*exp(-x)*sin(x)

v = f(4)  # f(x) works with scalar x

# Redefine exp and sin with their vectorized versions
from numpy import exp, sin, linspace
x = linspace(0, 4, 100001)
v = f(x)  # f(x) works with array x
!ec


!split
===== Python functions can return multiple values =====
idx{multiple return values}

Return $s(t)=v_0t+\frac{1}{2}at^2$ and $s'(t)=v_0 + at$:

!bc pypro
def movement(t, v0, a):
    s = v0*t + 0.5*a*t**2
    v = v0 + a*t
    return s, v

s_value, v_value = movement(t=0.2, v0=2, a=4)
!ec

`return s, v` means that we return a *tuple* ($\approx$ list):

!bc pyshell
>>> def f(x):
...     return x+1, x+2, x+3
...
>>> r = f(3)     # Store all three return values in one object r
>>> print r
(4, 5, 6)
>>> type(r)      # What type of object is r?
<type 'tuple'>
>>> print r[1]
5
!ec

Tuples are constant lists (cannot be changed)

!split
===== A more general mathematical formula (part I) =====
label{basics:formula:piecewise}

Equations from basic kinematics:

!bt
\begin{align*}
v = \frac{ds}{dt},\quad s(0)=s_0\\
a = \frac{dv}{dt},\quad v(0)=v_0
\end{align*}
!et

Integrate to find $v(t)$:

!bt
\[ \int_0^t a(t)dt = \int_0^t \frac{dv}{dt} dt\]
!et
which gives

!bt
\[ v(t) = v_0 + \int_0^t a(t)dt \]
!et

!split
===== A more general mathematical formula (part II) =====

Integrate again over $[0,t]$ to find $s(t)$:

!bt
\[ s(t) = s_0 + v_0t + \int_0^t\left( \int_0^t a(t)dt \right) dt\]
!et

Example: $a(t)=a_0$ for $t\in[0,t_1]$, then $a(t)=0$ for $t>t_1$:

!bt
\[
s(t) = \left\lbrace\begin{array}{ll}
s_0 + v_0 t + \frac{1}{2}a_0 t^2,& t\leq t_1\\
s_0 + v_0t_1 + \frac{1}{2}a_0 t_1^2 + a_0t_1(t-t_1),& t> t_1
\end{array}\right.
\]
!et

Need *if test* to implement this!

!split
===== Basic if-else tests =====
label{basics:if}

idx{branching}
idx{if test}
idx{boolean expression}

An if test has the structure

!bc pycod
if condition:
    <statements when condition is True>
else:
    <statements when condition is False>
!ec
Here,

 * `condition` is a boolean expression with value `True` or
   `False`.

!bc pycod
if t <= t1:
    s = v0*t + 0.5*a0*t**2
else:
    s = v0*t + 0.5*a0*t1**2 + a0*t1*(t-t1)
!ec

!split
===== Multi-branch if tests =====

!bc pycod
if condition1:
    <statements when condition1 is True>
elif condition2:
    <statements when condition1 is False and condition2 is True>
elif condition3:
    <statements when condition1 and conditon 2 are False
     and condition3 is True>
else:
    <statements when condition1/2/3 all are False>
!ec

Just if, no else:

!bc pycod
if condition:
    <statements when condition is True>
!ec

!split
===== Implementation of a piecewisely defined function with if =====

A Python function implementing the mathematical function

!bt
\[
s(t) = \left\lbrace\begin{array}{ll}
s_0 + v_0 t + \frac{1}{2}a_0 t^2,& t\leq t_1\\
s_0 + v_0t_1 + \frac{1}{2}a_0 t_1^2 + a_0t_1(t-t_1),& t> t_1
\end{array}\right.
\]
!et

reads

@@@CODE src-bumpy/plot3.py fromto: def s_func@n = 201

!split
===== Python functions containing if will not accept array arguments =====

!bc pyshell
>>> def f(x): return x if x < 1 else 2*x
...
>>> import numpy as np
>>> x = np.linspace(0, 2, 5)
>>> f(x)
Traceback (most recent call last):
...
ValueError: The truth value of an array with more than one
element is ambiguous. Use a.any() or a.all()
!ec

Problem: `x < 1` evaluates to a boolean array, not just a boolean

!split
===== Remedy 1: Call the function with scalar arguments =====

@@@CODE src-bumpy/plot3.py fromto: n = 201@plt\.plot

Can now easily plot:

@@@CODE src-bumpy/plot3.py fromto: plt\.plot@

!split
===== Remedy 2: Vectorize the if test with `where` =====

idx{vectorizing if tests}

Functions with if tests require a complete rewrite to work with
arrays.

!bc pycod
s = np.where(condition, s1, s2)
!ec

Explanation:

 * `condition`: array of boolean values
 * `s[i] = s1[i]` if `condition[i]` is `True`
 * `s[i] = s2[i]` if `condition[i]` is `False`

Our example then becomes

!bc pycod
s = np.where(t <= t1,
             v0*t + 0.5*a0*t**2,
             v0*t + 0.5*a0*t1**2 + a0*t1*(t-t1))
!ec

Note that `t <= t1` with array `t` and scalar `t1` results in a boolean
array `b` where `b[i] = t[i] <= t1`.

!split
===== Remedy 3: Vectorize the if test with array indexing =====

 * Let `b` be a boolean array (e.g., `b = t <= t1`)
 * `s[b]` selects all elements `s[i]` where `b[i]` is `True`
 * Can assign some array expression `expr` of length
   `len(s[b])` to `s[b]`: `s[b] = (expr)[b]`

Our example can utilize this technique with `b` as `t <= t1` and `t > t1`:

!bc pycod
s = np.zeros_like(t)  # Make s as zeros, same size & type as t
s[t <= t1] = (v0*t + 0.5*a0*t**2)[t <= t1]
s[t > t1]  = (v0*t + 0.5*a0*t1**2 + a0*t1*(t-t1))[t > t1]
!ec

!split
======= Files =======
label{basics:files}

FIGURE: [fig-bumpy/files1, width=400 frac=0.7]

!split
===== File reading =====

Put input data in a text file:

!bc dat
v0 = 2
a = 0.2
dt = 0.1
interval = [0, 2]
!ec

!bbox
How can we read this file into variables `v0`, `a`, `dt`, and `interval`?
!ebox

!split
===== Code for reading files with lines `variable = value` =====

@@@CODE src-bumpy/for_file_read_input.py fromto: infile = @t_values =

!split
===== Splitting lines into words is a frequent operation =====

!bc pyshell
>>> line = 'v0 = 5.3'
>>> variable, value = line.split('=')
>>> variable
'v0 '
>>> value
' 5.3'
>>> variable.strip()  # strip away blanks
'v0'
!ec

Note: must convert `value` to `float` before we can compute with
the value!

!split
===== The magic `eval` function =====

`eval(s)` executes a string `s` as a Python expression and creates the
corresponding Python object

!bc pyshell
>>> obj1 = eval('1+2')   # Same as obj1 = 1+2
>>> obj1, type(obj1)
(3, <type 'int'>)
>>> obj2 = eval('[-1, 8, 10, 11]')
>>> obj2, type(obj2)
([-1, 8, 10, 11], <type 'list'>)
>>> from math import sin, pi
>>> x = 1
>>> obj3 = eval('sin(pi*x)')
>>> obj3, type(obj3)
(1.2246467991473532e-16, <type 'float'>)
!ec

Why is this so great? We can read formulas, lists, expressions as
text from file and with `eval` turn them into live Python objects!

!split
===== Implementing a calculator in Python =====

Demo:

!bc sys
Terminal> python calc.py "1 + 0.5*2"
2.0
Terminal> python calc.py "sin(pi*2.5) + exp(-4)"
1.0183156388887342
!ec

Just 5 lines of code:

!bc pypro
import sys
command_line_expression = sys.argv[1]
from math import *   # Define sin, cos, exp, pi, etc.
result = eval(command_line_expression)
print result
!ec

!split
===== Modern Python often applies the `with` statement for file handling =====

!bc pycod
with open('.input.dat', 'r') as infile:
    for line in infile:
        ...
!ec

No need to close the file when using `with`

!split
===== File writing =====

 * We have $t$ and $s(t)$ values in two lists, `t_values` and
   `s_values`
 * Task: write these lists as a nicely formatted table in a file

Code:

@@@CODE src-bumpy/for_file_read_input.py fromto: outfile =@# Alternative

!split
===== Simplified writing of tabular data to file via `numpy.savetxt` =====

@@@CODE src-bumpy/for_file_read_input.py fromto: import numpy as@# Read the file back

`table2.dat`:

!bc dat
# t   s(t)
0.00 0.0000
0.10 0.2010
0.20 0.4040
0.30 0.6090
0.40 0.8160
0.50 1.0250
0.60 1.2360
...
1.90 4.1610
2.00 4.4000
!ec


!split
===== Simplified reading of tabular data from file via `numpy.loadtxt` =====

@@@CODE src-bumpy/for_file_read_input.py fromto: data = np\.loadtxt@

Note:

 * Lines beginning with the comment character `#` are skipped in the reading
 * `data` is a two-dimensional array: `data[i,0]`
   holds the $t$ value and `data[i,1]` the $s(t)$ value in the `i`-th
   row




!split
======= Classes =======
label{basics:class}

!bblock
 * All objects in Python are made from a class
 * You don't need to know about classes to use Python
 * But class programming is powerful
!eblock

!bblock
 * Class = functions + variables packed together
 * A class is a logical unit in a program
 * A large program as a combination of appropriate units
!eblock

!split
===== A very simple class =====

 * One variable: `a`
 * One function: `dump` for printing `a`

!bc pycod
class Trivial:
    def __init__(self, a):
        self.a = a

    def dump(self):
        print self.a
!ec

Class terminology: Functions are called
*methods* and variables are called *attributes*.

!split
===== How can we use this class? =====

First, make an *instance* (object) of the class:

!bc pycod
t = Trivial(a=4)
t.dump()
!ec

Note:

 * The syntax `Trivial(a=4)` actually means `Trivial.__init__(t, 4)`
 * `self` is an argument in `__init__` and `dump`, but not used in the calls
 * `__init__` is called *constructor* and is used to construct an object
   (instance) if the class
 * `t.dump()` actually means `Trivial.dump(t)` (`self` is `t`)

!split
===== The `self` argument is a difficult thing for newcomers... =====

It takes time and experience to understand the `self` argument in
class methods!

 o `self` must always be the first argument
 o `self` is never used in calls
 o `self` is used to access attributes and methods inside methods

We refer to a "more comprehensive text on classes":
"http://hplgit.github.io/primer.html/doc/pub/class/index.html"
for better explanation of `self`.

!bblock
`self` is confusing in the beginning, but later it greatly helps
the understanding of how classes work!
!eblock

!split
===== A class for representing a mathematical function =====

Function with one independent variable $t$ and two parameters
$v_0$ and $a$:

!bt
\[ s(t; v_0, a) = v_0t + \frac{1}{2}at^2\]
!et

Class representation of this function:

 * `v0` and `a` are variables (data)
 * A method to evaluate $s(t)$, but just as a function of `t`

Usage:

!bc pycod
s = Distance(v0=2, a=0.5)  # create instance
v = s(t=0.2)               # compute formula
!ec

!split
===== The class code =====

!bc pycod
class Distance:
    def __init__(self, v0, a):
        self.v0 = v0
        self.a = a

    def __call__(self, t):
        v0, a = self.v0, self.a  # make local variables
        return v0*t + 0.5*a*t**2

s = Distance(v0=2, a=0.5)  # create instance
v = s(t=0.2)               # actually s.__call__(t=0.2)
!ec

!split
===== Class implementation of $f(x,y,z; p_1,p_2,\ldots,p_n)$ =====

 * The $n$ parameters $p_1,p_2,\ldots,p_n$ are attributes
 * `__call__(self, x, y, z)` is used to compute $f(x, y, z)$

!bc pycod
class F:
    def __init__(self, p1, p2, ...):
        self.p1 = p1
        self.p2 = p2
        ...

    def __call__(self, x, y, z):
        # return formula involving x, y, z and self.p1, self.p2 ...

f = F(p1=..., p2=..., ...)   # create instance with parameters
print f(1, 4, -1)            # evaluate f(x,y,z) function
!ec
